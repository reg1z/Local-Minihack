# -*- mode: ruby -*-
# vi: set ft=ruby :

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

#############################
##### BEGIN ACTUAL FILE #####
#############################
uniqId = Time.now.to_i

Vagrant.configure("2") do |config|

  
  # Define VM 1 - Ubuntu Webserver
  config.vm.define "ubuntu" do |ubuntu|
    ubuntu.vm.box = "ubuntu/focal64"
    ubuntu.vm.box_version = "20240821.0.1"
    ubuntu.vm.hostname = "ubuntu-sandbox"

    # Provisioning "sandbox" account + desktop environment
    ubuntu.vm.provision "shell", inline: <<-SHELL
      # Update and upgrade packages
      sudo apt-get update && sudo apt-get upgrade -y

      # Install Ubuntu Desktop Environment (standard GNOME desktop)
      sudo apt-get install -y ubuntu-desktop

      # Ensure system boots into graphical.target (desktop mode)
      sudo systemctl set-default graphical.target

      # Create the 'sandbox' user with the specified password
      sudo useradd -m -s /bin/bash sandbox
      echo 'sandbox:password' | sudo chpasswd

      # Grant 'sandbox' user sudo privileges without password
      # echo 'sandbox ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/sandbox
      echo 'sandbox ALL=(ALL) ALL' | sudo tee /etc/sudoers.d/sandbox

      # Ensure permissions for the sudoers file are correct
      sudo chmod 0440 /etc/sudoers.d/sandbox

      # Replace the current shell with sandbox user shell to delete vagrant user
      #echo 'Deleting vagrant user...'
      #exec su - sandbox -c "sudo deluser --remove-home vagrant"
      
      # Reboot into the desktop environment
      sudo reboot

    SHELL

    ubuntu.vm.network "private_network", ip: "192.168.56.11"
    ubuntu.vm.provider "virtualbox" do |vb|
      vb.name = "ubuntu-#{uniqId}"
      vb.gui = true
      vb.memory = 2048
      vb.cpus = 1
    end
  end

  # Define VM 2 - Kali External
  config.vm.define "kaliExternal" do |kaliExternal|
    kaliExternal.vm.box = "blue-team-labs/kali-2021.1"
    kaliExternal.vm.box_version = "0.2.0"
    kaliExternal.vm.hostname = "kali-external"
    kaliExternal.vm.network "private_network", ip: "192.168.56.12"
    kaliExternal.vm.provider "virtualbox" do |vb|
      vb.name = "kali-external-#{uniqId}"
      vb.gui = true
      vb.memory = 2048
      vb.cpus = 1
    end
  end

  # Define VM 3 - Kali Internal
  config.vm.define "kaliInternal" do |kaliInternal|
    kaliInternal.vm.box = "blue-team-labs/kali-2021.1"
    kaliInternal.vm.box_version = "0.2.0"
    kaliInternal.vm.hostname = "kali-internal"
    kaliInternal.vm.network "private_network", ip: "192.168.56.13"
    kaliInternal.vm.provider "virtualbox" do |vb|
      vb.name = "kali-internal-#{uniqId}"
      vb.gui = true
      vb.memory = 2048
      vb.cpus = 1
    end
  end

  # Define VM 4 - Microtik Router
  config.vm.define "microtik" do |microtik|
    microtik.vm.box = "blue-team-labs/routeros7-17-2"
    microtik.vm.box_version = "0.1.0"
    #microtik.vm.hostname = "microtik-router"
    microtik.vm.network "private_network", ip: "192.168.56.1"
    microtik.vm.provider "virtualbox" do |vb|
      vb.name = "Microtik-#{uniqId}"
      vb.gui = true
      vb.memory = 256
      vb.cpus = 1
    end
  end

end

